МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
 ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
 


Кафедра «Програмна інженерія»
 



ЗВІТ
з практичної роботи №1
з дисципліни «Аналіз та рефакторинг коду»
на тему «Правила оформлення програмного коду»
 



 
Виконала:                                                           	              	Прийняв:
ст. гр. ПЗПІ-22-7                                    	       	     		Сокорчук І.П.
Кравченко В. А.







Харків 2024
     Мета заняття:
     Ознайомити студентів з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для різних мов програмування, а також навчити аналізувати та рефакторити код для покращення його якості.
     Завдання:
     Обрати мову програмування, дослідити основні рекомендації для написання якісного коду у цій мові, продемонструвати ці рекомендації на прикладах коду, обґрунтувати кожну рекомендацію і надати детальні пояснення. Для кожного прикладу мають бути наведені фрагменти коду.
     Хід роботи:
     Обрана мова програмування Java. Java — це мова програмування загального призначення, створена компанією Sun Microsystems 1995 року. Її використовують для розробки програмного забезпечення, вебсервісів, ігор і застосунків.
     Java є однією з найпопулярніших мов програмування у світі завдяки нескладному синтаксису, гнучкості, безпеці, портативності та масштабованості.
     Згідно з рейтингом мов програмування DOU, Java — третя за популярністю мова серед українських розробників. 14,3% айтівців писали нею станом на початок 2022 року.
     Серед Back-end розробників Java є беззаперечним лідером — її використовують 29,4% розробників у цій сфері.
     Java підходить для початківців, оскільки існує значна кількість навчальних матеріалів, велика спільнота, мова продовжує розвиватись. Крім того, вона не втратить актуальність ще тривалий час, оскільки безліч застосунків не тільки написані на Java, а й підвʼязані під платформу для запуску Java Virtual Machine (JVM) і набір для розробки Java Development Kit (JDK).
     Переваги Java:
     • популярна на ринку праці;
     • має велике ком’юніті;
     • розвинена екосистема;
     • об’єктноорієнтована і суворо типізована мова, а отже, не складна у вивченні;
     • перевірена часом.
     Водночас Java має і низку недоліків:
     • є популярною лише у бекенд-розробці;
     • синтаксис мови є багатослівним і несучасним;
     • Java потужна завдяки своїм фреймворкам і бібліотекам, які також потрібно вчити;
     • велика кількість проєктів використовує стару версію мови.

     1. Стильові рекомендації:
     Використання відступів та пробілів:
• Відступи: використовуйте 4 пробіли для відступів. Це покращує читабельність коду.
• Довжина рядка: обмежуйте довжину рядка до 80 символів, щоб уникнути горизонтального прокручування.
• Розташування фігурних дужок: у Java прийнято відкривати фігурну дужку на тій же лінії, де починається конструкція (метод чи цикл).
• Коментарі та документація: документуйте свій код, використовуючи коментарі Javadoc. Це допомагає іншим розробникам швидко зрозуміти функціональність вашого коду.
     Чому важливо: стильові правила покращують читабельність коду. Правильні відступи дозволяють легко визначати блоки коду, цикли та умови. Це також стандартизує вигляд коду серед розробників.
     Наслідки недотримання: якщо відступи використовуються невпорядковано, код стає важким для сприйняття. Це може призвести до труднощів у спільній роботі над проєктом або під час його рефакторингу.
     Приклад:
            public class Example {
                public static void main(String[] args) {
                    if (args.length > 0) {
                        System.out.println("Arguments: " + args[0]);
                    }
                }
            }
            
     Тут використовується 4 пробіли для кожного рівня відступу, що є загальноприйнятим стандартом у Java.
     Як це впливає на підтримку: чіткий стиль полегшує підтримку та розширення коду іншими розробниками. Якщо структура коду ясна, його легше редагувати та оновлювати.
     
     2. Правила найменування змінних, функцій та класів:
     CamelCase для змінних та методів, PascalCase для класів:	
• Змінні: використовуйте camelCase для змінних (наприклад, myVariable).
• Функції: використовуйте camelCase для функцій (наприклад, calculateSum()).
• Класи: використовуйте PascalCase для класів (наприклад, MyClass).
     Чому важливо: єдина схема найменування підвищує читабельність та дозволяє легко розуміти призначення кожного елемента. У Java це стандарт, що сприяє взаєморозумінню серед розробників.
     Наслідки недотримання: якщо змінні або класи мають неочікувані або нестандартні імена, це ускладнює роботу з кодом. Розробник може витратити більше часу на розуміння логіки.
     Приклад:
            public class Car {
                private String carModel;
                
                public String getCarModel() {
                    return carModel;
                }
            }
            
            У цьому прикладі Car — клас, названий у PascalCase, а carModel — змінна у camelCase.
     Як це впливає на підтримку: чітке і послідовне найменування змінних і методів значно спрощує підтримку та масштабування коду, особливо у великих проектах.
     
     3. Структура коду:
     Один клас — один файл, дотримання інкапсуляції:
• Організація файлів: кожен клас має бути в окремому файлі з відповідною назвою.
• Порядок елементів: спочатку йдуть імпорти, потім оголошення класу, конструктори, методи.
• Організація методів: розташовуйте методи у логічній послідовності. Наприклад, методи, які викликаються іншими методами, мають бути розташовані поруч.
     Чому важливо: одна з важливих концепцій Java — інкапсуляція, яка полягає в тому, щоб приховувати деталі реалізації та захищати дані класу від зовнішніх змін. Це сприяє чіткому розподілу відповідальностей.
     Наслідки недотримання: якщо в одному файлі буде занадто багато класів або не буде дотримана інкапсуляція, підтримка та тестування коду стає складнішим.
     Приклад:
            // Car.java
            public class Car {
                private String model;
                public void start() {
                    System.out.println(model + " is starting");
                }
            }
            
     Тут кожен клас має бути розміщений в окремому файлі, що відповідає Java-практикам.
     Як це впливає на підтримку: поділ на окремі файли дозволяє легше знаходити необхідний код і працювати з великими проєктами.
     
     4. Принципи рефакторингу:
     DRY (Don’t Repeat Yourself) та SRP (Single Responsibility Principle):
     Чому важливо: принцип DRY допомагає уникнути дублювання коду, яке призводить до складності підтримки. SRP передбачає, що кожен клас або метод має виконувати лише одну задачу.
     Наслідки недотримання: дублювання коду призводить до того, що зміни потрібно вносити в кількох місцях, що підвищує ризик помилок. Якщо класи мають багато відповідальностей, їх важко модифікувати.
     Приклад:
            public class Car {
                private String model;
                
                public void start() {
                    System.out.println(model + " is starting");
                }
            }
            
     Код не дублюється, і кожен клас виконує свою чітку задачу.
     Як це впливає на підтримку: недотримання принципів призводить до складнішого коду, що важко змінювати й тестувати.
     
     5. Оптимізація продуктивності:
     Використання оптимальних колекцій і алгоритмів:
• Уникайте непотрібних обчислень: використовуйте кешування результатів обчислень.
• Ефективне використання колекцій: використовуйте відповідні структури даних для конкретних задач.
     Чому важливо: правильний вибір структур даних і алгоритмів значно впливає на продуктивність програми. У Java велике значення має вибір між різними типами колекцій (наприклад, ArrayList, LinkedList, HashMap тощо).
     Наслідки недотримання: неправильний вибір структури даних може суттєво вплинути на швидкодію програми, особливо при роботі з великими обсягами даних.
     Приклад:
            List<String> list = new ArrayList<>();
            list.add("Example");
            
     Тут використовується ArrayList, оскільки цей тип колекції добре підходить для швидкого випадкового доступу до елементів.
     Як це впливає на підтримку: оптимальні структури даних допомагають уникати проблем із продуктивністю у великих проектах.
     
     6. Обробка помилок:
     Винятки та обробка помилок:
• Використовуйте виключення: обробляйте помилки за допомогою виключень (try-catch блоки).
• Логування: логуйте помилки для подальшого аналізу.
     Чому важливо: обробка помилок дозволяє контролювати роботу програми в умовах виникнення непередбачених ситуацій. В Java винятки використовуються для обробки таких помилок, як ділення на нуль, неправильні параметри або збої у файлах.
     Наслідки недотримання: програма може вийти з ладу без чіткого повідомлення про помилку. Це ускладнює пошук і виправлення помилок.
     Приклад:
            try {
                int result = 10 / 0;
            } catch (ArithmeticException e) {
                System.out.println("Division by zero is not allowed.");
            }
            
     Використання try-catch дозволяє уникнути зупинки програми в разі помилки.
     Як це впливає на підтримку: правильна обробка винятків полегшує підтримку коду, оскільки всі помилки належним чином контролюються.
     
     7. Дотримання парадигм програмування:
     Об'єктно-орієнтоване програмування (ООП):
• Об’єктно-орієнтоване програмування (ООП): використовуйте принципи ООП, такі як інкапсуляція, наслідування, поліморфізм.
• Функціональне програмування: використовуйте лямбда-вирази та функціональні інтерфейси.
     Чому важливо: Java є об'єктно-орієнтованою мовою, і дотримання її парадигм (інкапсуляція, успадкування, поліморфізм) робить код модульним, зручним для розширення та підтримки.
     Наслідки недотримання: Код може стати неконтрольованим і важким для підтримки, якщо не дотримуватися ООП-принципів.
     Приклад:
            public class Animal {
                public void makeSound() {
                    System.out.println("Some sound");
                }
            }
            
            public class Dog extends Animal {
                @Override
                public void makeSound() {
                    System.out.println("Woof");
                }
            }
            
            Поліморфізм дозволяє використовувати загальні класи для різних об'єктів.
     Як це впливає на підтримку: Правильне використання ООП-принципів спрощує додавання нових функцій і модулів до коду.
     
     8. Тестування та документування коду:
     Юніт-тести та Javadoc:
• Тестування: пишіть юніт-тести для перевірки функціональності коду.
• Документування: використовуйте коментарі та Javadoc для документування коду.
     Чому важливо: тестування допомагає гарантувати, що код працює належним чином, а документація дозволяє легко розуміти функціонал. Javadoc автоматично генерує документацію, що спрощує підтримку.
     Наслідки недотримання: без тестів та документації розуміння та підтримка коду стають значно складнішими.
     Приклад JUnit:
     import org.junit.Test;
     import static org.junit.Assert.assertEquals;
     
     public class CalculatorTest {
         @Test
         public void testAdd() {
             Calculator calculator = new Calculator();
             assertEquals(5, calculator.add(2, 3));
         }
     }
     Приклад Javadoc:
            /**
             * Calculates the sum of two numbers.
             * @param a first number
             * @param b second number
             * @return sum of a and b
             */
            public int add(int a, int b) {
                return a + b;
            }
            
     Тут використовується Javadoc для опису методу.
     Як це впливає на підтримку: тести дозволяють впевнитись у коректності коду, а документація полегшує його використання іншими розробниками.
	Висновок:
     Дотримання основних рекомендацій щодо написання коду в Java значно покращує його якість, читабельність і підтримку. Правильна структура коду, чіткі правила найменування, оптимізація продуктивності та якісна обробка помилок роблять код легшим для розуміння і модифікації. Дотримання принципів ООП та SRP робить код гнучким і легким для модифікації без впливу на інші частини проєкту, а юніт-тестування і документування підвищують надійність і спрощують роботу з проєктом у майбутньому. Оптимізація ресурсів дозволяє зменшити споживання пам'яті і підвищити швидкість виконання. Правильне форматування, документація і тести сприяють легкому введенню нових розробників у проєкт та спрощують майбутні зміни або рефакторинг. Загалом, ці практики сприяють створенню чистого, зрозумілого та довговічного коду.
     Посилання на відеозапис доповіді Code Convention на YouTube: https://www.youtube.com/watch?v=CPJE1pbH1rE
	Додаток:

Рисунок 1 – слайд презентації №1

Рисунок 2 – слайд презентації №2


Рисунок 3 – слайд презентації №3





Рисунок 4 – слайд презентації №4


Рисунок 5 – слайд презентації №5


Рисунок 6 – слайд презентації №6


Рисунок 7 – слайд презентації №7


Рисунок 8 – слайд презентації №8


Рисунок 9 – слайд презентації №9


Рисунок 10 – слайд презентації №10


Рисунок 11 – слайд презентації №11


Рисунок 12 – слайд презентації №12


Рисунок 13 – слайд презентації №13


Рисунок 14 – слайд презентації №14


Рисунок 15 – слайд презентації №15


Рисунок 16 – слайд презентації №16


Рисунок 17 – слайд презентації №17


Рисунок 18 – слайд презентації №18


Рисунок 19 – слайд презентації №19


Рисунок 20 – слайд презентації №20


Рисунок 21 – слайд презентації №21


Рисунок 22 – слайд презентації №22


Рисунок 23 – слайд презентації №23
